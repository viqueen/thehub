/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.viqueen.portal.api;

import org.viqueen.portal.model.Card;
import org.viqueen.portal.model.CardBalance;
import org.viqueen.portal.model.CardInvoice;
import org.viqueen.portal.model.Error;
import org.viqueen.portal.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-03-06T17:32:28.136+01:00")

@Api(value = "cards", description = "the cards API")
public interface CardsApi {

    @ApiOperation(value = "Block card", nickname = "blockCard", notes = "Aviability for end-customet to block a debit or credit card. (Not Cresco Cards)", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Cards", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The card is now blocked", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/cards/{cardId}/block",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<List<String>> blockCard(@ApiParam(value = "",required=true) @PathVariable("cardId") String cardId);


    @ApiOperation(value = "Get card balance", nickname = "cardsCardIdBalanceGet", notes = "", response = CardBalance.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Cards", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status 200", response = CardBalance.class) })
    @RequestMapping(value = "/cards/{cardId}/balance",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<CardBalance> cardsCardIdBalanceGet(@ApiParam(value = "",required=true) @PathVariable("cardId") String cardId);


    @ApiOperation(value = "Get card statement", nickname = "gertCardInvoice", notes = "Get card statement for the specified month", response = CardInvoice.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Cards", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request succeeded", response = CardInvoice.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/cards/{cardId}/statement/{year}/{month}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<CardInvoice> gertCardInvoice(@ApiParam(value = "",required=true) @PathVariable("cardId") String cardId,@ApiParam(value = "YYYY",required=true) @PathVariable("year") String year,@ApiParam(value = "MM, where January is 01",required=true) @PathVariable("month") String month);


    @ApiOperation(value = "Get card details", nickname = "getCardDetailsById", notes = "**NOTE:** May not be relevant, if \"Get cards for current customer\" returnes the same information, but for all the customer's cards.  Includes balance and credit limit (when applicable).", response = Card.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Cards", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request succeeded", response = Card.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/cards/{cardId}/details",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Card> getCardDetailsById(@ApiParam(value = "",required=true) @PathVariable("cardId") String cardId);


    @ApiOperation(value = "Get card transactions", nickname = "getCardTransactions", notes = "**Note:** Duplicates endpoint in ```Transactions```. For evaluation purposes.   Transactionlist for the customers creditcard", response = Transaction.class, responseContainer = "List", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Cards", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request succeeded", response = Transaction.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/cards/{cardId}/transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getCardTransactions(@ApiParam(value = "",required=true) @PathVariable("cardId") String cardId);


    @ApiOperation(value = "Get cards for current customer", nickname = "getCardsForCurrentCustomer", notes = "List over the current ```customer```'s debet and credit cards. ", response = Card.class, responseContainer = "List", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Cards", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request succeeded", response = Card.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/cards",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Card>> getCardsForCurrentCustomer();


    @ApiOperation(value = "Unblock card", nickname = "unblockCard", notes = "Unblock a blocked ```card```.", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Cards", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Unblocked"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/cards/{cardId}/unblock",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> unblockCard(@ApiParam(value = "",required=true) @PathVariable("cardId") String cardId);

}

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.CurrencyRate;
import io.swagger.model.Error;
import org.threeten.bp.LocalDate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-03-06T17:32:28.136+01:00")

@Api(value = "currencies", description = "the currencies API")
public interface CurrenciesApi {

    @ApiOperation(value = "Currency conversion", nickname = "currencyConvert", notes = "Convert amount from CUR1 to CUR2. Quite basic for now. Input welcome.", response = CurrencyRate.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Currencies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request succeeded", response = CurrencyRate.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/currencies/convert/{base}/{currency}/{amount}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<CurrencyRate> currencyConvert(@ApiParam(value = "ISO 4217: alpha 3-letter upcase e.g EUR",required=true) @PathVariable("base") String base,@ApiParam(value = "ISO 4217: alpha 3-letter upcase e.g EUR",required=true) @PathVariable("currency") String currency,@ApiParam(value = "",required=true) @PathVariable("amount") BigDecimal amount,@ApiParam(value = "End of day rate.") @Valid @RequestParam(value = "date", required = false) LocalDate date);


    @ApiOperation(value = "Get a currency rate list", nickname = "currencyList", notes = "Suitable for making a table or similar.  ``` {     timestamp: 1504548341,     base: \"NOK\",     rates: {         AED: 3.672538,         AFN: 66.809999,         ALL: 125.716501,         AMD: 484.902502,         ANG: 1.788575,         AOA: 135.295998,         ARS: 9.750101,         AUD: 1.390866,         /_* ... *_/     } } ```", response = CurrencyRate.class, responseContainer = "List", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "Read"),
            @AuthorizationScope(scope = "write", description = "Write")
            })
    }, tags={ "Currencies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request succeeded", response = CurrencyRate.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/currencies/list/{base}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<CurrencyRate>> currencyList(@Size(min=3,max=3) @ApiParam(value = "\"Home\" currency. ISO 4217: alpha 3-letter upcase",required=true) @PathVariable("base") String base,@ApiParam(value = "End of day rate.") @Valid @RequestParam(value = "date", required = false) String date);

}
